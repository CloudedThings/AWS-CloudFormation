Parameters:
  NameOfService:
    Description: "The name of the service this stack is to be used for"
    Type: String 
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access into the server
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Description: Enter the VpcId
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Description: Enter the SubnetId
    Type: List<AWS::EC2::Subnet::Id>
Mappings:
  RegionMap:
    eu-north-1:
      AMI: ami-0f0b4cb72cf3eadf3
    eu-central-1:
      AMI: ami-07df274a488ca9195
Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer 
    Properties:
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: !Ref SubnetIds 
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener 
    Properties:
      LoadBalancerArn: !Ref LoadBalancer 
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 3
      TargetGroupARNs:
        - !Ref TargetGroup
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata: 
      Comment: Install php and httpd
      AWS::CloudFormation::Init:
        config: 
          packages: 
            yum:
              httpd: []
              php: []
          files: 
            /var/www/html/index.php:
              content: !Sub |
                <?php print "Hello from cloudofthings.net!"; ?>
          services: 
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      KeyName: !Ref KeyName
      InstanceType: t3.micro
      SecurityGroups:
        - !Ref EC2SecurityGroup
      ImageId: 
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region 
        - AMI
      UserData:
        'Fn::Base64': 
          !Sub |
            #!/bin/bash -xe                        
            # Ensure AWS CFN Bootstrap is the latest
            yum install -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Instance
  EC2InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp 
      FromPort: '80'
      ToPort: '80'
      SourceSecurityGroupId:
        !GetAtt 
        - ALBSecurityGroup
        - GroupId
      GroupId:
        !GetAtt 
        - EC2SecurityGroup
        - GroupId
Outputs:
  Website:
    Description: The Public DNS for the EC2 Instance 
    Value: !Sub 'http://${LoadBalancer.DNSName}'